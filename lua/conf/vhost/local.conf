  # lua 文件的位置
  lua_package_path "/usr/local/openresty/nginx/conf/lua_src/?.lua;;/usr/local/openresty/lualib/?.lua;;";
  # nginx启动阶段时执行的脚本，可以不加
  init_by_lua_file 'conf/lua_src/Init.lua';


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	#location / {
	#default_type text/html;
	#root html;
	#echo "uri$uri";
       # content_by_lua_block {
       	#	ngx.say("<p>hello, world111231</p>")
	     #   ngx.say("<p>hello, world</p>")
        #}
	#}


    location /test {
    	   default_type text/html;
	       #content_by_lua 'cache.cache()';
    }

	#location / {
	    # google 域名解析
	#	resolver 8.8.8.8;
	#	 set $target "www.baidu.com";
	 # 此处变量涉及到了域名 需要调用resolver指令进行解析下否则会报错。
	#	 #proxy_pass https://$target;

	#}




	 location / {
			default_type text/html;
			 #可以方便调试lua脚本修改lua脚本之后，不需要 reload nginx.
			lua_code_cache off;
			content_by_lua 'short_cmd.short_url()';
	 }

	 #代理测试
	 #location /proxytest {
			#default_type text/html;
			 #可以方便调试lua脚本修改lua脚本之后，不需要 reload nginx.
			#lua_code_cache off;

			#set $new_uri "";
			#rewrite_by_lua_block {
			#	ngx.var.new_uri = "192.168.137.137:81/proxy"
			#}
			#proxy_pass http://$new_uri;

	# }


    #代理一
	 #location /proxytest {
			 default_type text/html;
			 #可以方便调试lua脚本修改lua脚本之后，不需要 reload nginx.
			 #lua_code_cache off;
			# set $new_uri "";
			 #rewrite_by_lua_file  "/usr/local/openresty/nginx/conf/lua_src/proxy_pass.lua";
			 #proxy_pass http://$new_uri;

	  #}

        #代理二
	   location /proxytest {
			 default_type text/html;
			 #可以方便调试lua脚本修改lua脚本之后，不需要 reload nginx.
			 lua_code_cache off;
			 rewrite_by_lua_file  "/usr/local/openresty/nginx/conf/lua_src/proxy_pass.lua";
			# content_by_lua_block {
				#res = ngx.location.capture("/proxypasstest/index2.html")
				#ngx.say(res.body)
			#}
	  }



	  #代理测试
	 location /proxypasstest {
		 default_type text/html;
		proxy_pass http://192.168.137.137:81;
	 }
}
